module UserAdmin where 

import Token
import Payment

template Issuer 
  with 
    userAdmin: Party 
    issuer: Party 
  where 
    signatory userAdmin 
    ensure userAdmin /= issuer
    observer issuer

    key (userAdmin, issuer): (Party, Party)
    maintainer key._1

    -- controller issuer can 
    --   nonconsuming MintToken: ContractId Token 
    --     with 
    --       description: Text 
    --       initialPrice: Decimal 
    --       currency: Text 
    --       royaltyRate: Decimal 
    --       thumbnail: Thumbnail
    --     do 
    --       issued <- getTime
    --       create Token
    --         with 
    --           lastPrice = initialPrice
    --           owner = issuer
    --           ..
    choice MintToken: ContractId Token
      with 
        description: Text
        initialPrice: Decimal
        currency: Text
        royaltyRate: Decimal
        thumbnail: Thumbnail
      controller issuer
      do
        issued <- getTime
        create Token
          with
            lastPrice = initialPrice
            owner = issuer
            ..

    -- controller userAdmin can 
    --   RevokeIssuer: () 
    --     do return ()
    choice RevokeIssuer: ()
      controller userAdmin
      do
        return()

template IssuerRequest
  with 
    userAdmin: Party 
    issuer: Party 
    reason: Text 
  where 
    signatory issuer 

    key (userAdmin, issuer): (Party, Party)
    maintainer key._2

    -- controller userAdmin can 
    --   GrantIssuerRights: ContractId Issuer 
    --     do 
    --       create Issuer with ..

    --   RejectIssuerRequest: () 
    --     do return ()
    choice GrantIssuerRights: ContractId Issuer
      controller userAdmin
      do
        create Issuer with ..
    
    choice RejectIssuerRequest: ()
      controller userAdmin
      do return ()

template Owner 
  with 
    userAdmin: Party 
    owner: Party 
  where 
    signatory userAdmin
    ensure userAdmin /= owner

    key (userAdmin, owner): (Party, Party)
    maintainer key._1

    -- controller owner can 
    --   nonconsuming AcceptTokenAsNewOwner: (ContractId Token, ContractId Payable, Optional (ContractId Payable))
    --     with 
    --       offerId: ContractId TokenOffer 
    --     do 
    --       exercise offerId AcceptToken 

    --   nonconsuming AcceptTokenByKey: (ContractId Token, ContractId Payable, Optional (ContractId Payable))
    --     with 
    --       issuer: Party 
    --       currentOwner: Party 
    --       description: Text 
    --     do 
    --       exerciseByKey @TokenOffer (issuer, currentOwner, description) AcceptToken
    
    nonconsuming choice AcceptTokenAsNewOwner:(ContractId Token, ContractId Payable, Optional (ContractId Payable))
      with 
        offerId: ContractId TokenOffer
      controller owner
      do
        exercise offerId AcceptToken
    
    nonconsuming choice AcceptTokenByKey: (ContractId Token, ContractId Payable, Optional (ContractId Payable))
      with
        issuer: Party
        currentOwner: Party
        description: Text
      controller owner
      do
        exerciseByKey @TokenOffer (issuer, currentOwner, description) AcceptToken

    -- controller userAdmin can 
    --   RevokeOwnerRights: () 
    --     do return ()
    choice RevokeOwnerRights: ()
      controller userAdmin
      do
        return()

template OwnerRequest 
  with 
    userAdmin: Party 
    owner: Party 
    reason: Text 
  where 
    signatory owner 
    observer userAdmin
    key (userAdmin, owner): (Party, Party)
    maintainer key._2

    -- controller userAdmin can 
    --   GrantOwnerRights: ContractId Owner 
    --     do 
    --       create Owner with ..

    --   RejectOwnerRequest: () 
    --     do return ()
    choice GrantOwnerRights: ContractId Owner
      controller userAdmin
      do
        create Owner with ..
    
    choice RejectOwnerRequest: ()
      controller userAdmin
      do
        return()