module Token where 

import Payment 

{-
Content creators can mint NFTs 
Owners can sell their NFTs
...but they have to pay $royalties.
Participants must be explicitly permitted.
-}

-- behavior 
-- datamodel 
-- rights/obligations 

template Token 
  with 
    issuer: Party 
    owner: Party 
    description: Text 
    userAdmin: Party -- makes sure issuer and owner are legit
    issued: Time 
    lastPrice: Decimal 
    currency: Text 
    royaltyRate: Decimal 
  where 
    signatory issuer, userAdmin 

    controller owner can 
      Offer: ContractId TokenOffer
        with 
          newOwner: Party 
          price: Decimal 
        do 
          create TokenOffer with ..

template TokenOffer 
  with 
    issuer: Party 
    owner: Party 
    description: Text 
    userAdmin: Party -- makes sure issuer and owner are legit
    issued: Time 
    newOwner: Party 
    price: Decimal 
    lastPrice: Decimal 
    currency: Text
    royaltyRate: Decimal 
  where 
    signatory issuer, userAdmin, owner 

    key (issuer, owner, description): (Party, Party, Text)
    maintainer key._2

    controller newOwner, userAdmin can 
      AcceptToken: (ContractId Token, ContractId Payable, Optional (ContractId Payable))
        do 
          fromNewOwnerToOwner <- create Payable 
            with 
              from = newOwner
              to = owner 
              amount = price 
              currency 
              reference = "Notional for `" <> description <> "`."

          condRoyaltyPayment <- if owner == issuer 
            then return None 
            else Some <$> create Payable 
              with 
                from = newOwner 
                to = issuer 
                amount = price * royaltyRate 
                currency 
                reference = "Royalty for `" <> description <> "`."

          newToken <- create Token 
            with 
              owner = newOwner 
              lastPrice = price 
              ..

          return (newToken, fromNewOwnerToOwner, condRoyaltyPayment)
